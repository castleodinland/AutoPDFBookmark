#!/usr/bin/env python
# -*- coding: utf-8 -*-

import codecs
import os
import re
import sys
import getopt
import fitz #pymupdf
import cssutils

from pprint import pprint

'''
AutoPDFBookmark Project
Generate bookmark(outline) according to the CSS file given

the CSS file should contain selector like:

body{
  font-family:"Microsoft Yahei";
  font-size: 14pt;
  line-height: 1.4em;
 }

h1 {
  font-family:"Microsoft Yahei";
  font-size: 28pt;
}

h2 {
  font-family:"Microsoft Yahei";
  font-size: 20pt;
}
...

and the PDF file should be generated by this CSS file
here we use Markdown PDF on vscode running 'Export(pdf)'

!!! the 'font-size' in body CANNOT equal to the h1,h2,h3... styles, else will encount error
'''

__version__ = '0.5.1'
__author__ = 'Castle'
__email__ = 'castleodinland@gmail.com'
__license__ = 'GPL'

css_list = [] #[selector, {xxx1:yyy1, xxx2:yyy2, ...}]

re_font_size = r'(\d+)pt'
re_head_title = r'h(\d+)'
re_chapter_code = r'(\d+\.\d+\.\d+)|(\d+\.\d+)|(\d+\.)'

pdf_input_name = 'mypdf.pdf'
css_input_name = 'markdownhere.css'

# the bmk_level should start from 1, if not, filter it.
has_main_title = 0

def usage():
    print ("AutoPDFBookmark version : %s"%(__version__))
    print ("\nThis is the usage function")
    print ('Usage:')
    print ('-f, --pdf []: specify the input .pdf file name, mypdf.pdf as default')
    print ('-c, --css [] : specify the input .css file name, markdownhere.css as default')

if __name__ == '__main__':
    print(fitz.__doc__)

    try:
        options,args = getopt.getopt(sys.argv[1:], "hf:c:", ["help","pdf=","css="])
    except getopt.GetoptError as err:
        usage()
        sys.exit(0)

    for name,value in options:
        if name in ("-h","--help"):
            usage()
            sys.exit(0)
        if name in ("-f","--pdf"):
            pdf_input_name = value
        if name in ("-c","--css"):
            css_input_name = value

    with open(css_input_name, 'rb') as fd:
        css = fd.read()
    sheet = cssutils.parseString(css)
    css_list = {}
    for rule in sheet:
        selector = rule.selectorText
        styles = rule.style.cssText
        # print('-->')
        # print(selector)
        inner_dict = {}
        for property in rule.style:
            # print(property.name)
            # print(property.value) 
            inner_dict[property.name] = property.value
        css_list[selector] = inner_dict

    # pprint(css_list)

    doc = fitz.open(pdf_input_name)
    toc = doc.get_toc(simple=False)
    if toc:
        print('the file has toc.')
        os._exit(1)

    # for pages in doc:
    for page_num, page in enumerate(doc, 1):
        blocks = page.get_text("dict", flags=11)["blocks"]

        for one_block in blocks:
            context = one_block['lines'][0]['spans'][0]
            # print (context)
            if context['flags'] == 0:
                for key,values in  css_list.items():
                    pattern = re.compile(re_head_title)
                    match_obj = pattern.match(key)
                    if match_obj: #get selector named hxxx
                        bmk_level = int(match_obj.group(1))
                        if 'font-size' in values and 'font-family' in values: #only match font-size and font-family
                            pattern = re.compile(re_font_size)
                            match_obj = pattern.match(values['font-size']) #only support pt for font-size
                            if match_obj and int(match_obj.group(1)) == int(context['size']):
                                pt1 = re.compile(re_chapter_code)
                                mo = pt1.match(context['text'])
                                if mo == None:
                                    continue
                                print(context['text'])
                                line_local = context['bbox'][1]
                                point = fitz.Point(0, float(line_local))
                                if has_main_title == 0 and bmk_level != 1:
                                    continue
                                elif has_main_title == 0:
                                    has_main_title = 1
                                toc.append([bmk_level, context['text'], page_num, {'kind':fitz.LINK_GOTO, 'to':point, 'collapse':1}])

    doc.set_toc(toc)
    pdf_input_name_new = pdf_input_name.rsplit(".", 1)[0] + '_new' + '.pdf'
    doc.save(pdf_input_name_new)
    doc.close()
        
